{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/ErrorDisplay.js","components/NewEntryDisplay.js","services/Entries.js","App.js","index.js"],"names":["Filter","st","steh","value","onChange","PersonForm","feh","na","naeh","nu","nueh","onSubmit","type","Persons","mp","deh","length","matchedPeople","map","person","name","number","onClick","ErrorDisplay","message","className","NewEntryDisplay","baseUrl","entries","getAll","axios","get","then","response","data","createEntry","newObject","post","updateEntry","id","put","deleteEntry","delete","App","useEffect","Entries","setPersons","useState","persons","error","setError","newEntryMessage","setNEM","newName","setNewName","newNumber","setNewNumber","newST","setST","console","log","filter","toUpperCase","includes","event","target","preventDefault","entry","find","p","undefined","window","confirm","newP","catch","setTimeout","alert","verifyEntry","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8579f5c9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({st, steh}) => <div>filter shown with <input value={st} onChange={steh}/></div>\r\n\r\nexport default Filter","import React from 'react'\r\n\r\n// f=form; na=name; nu=number; eh=event handler;\r\nconst PersonForm = ({feh, na, naeh, nu, nueh}) => {\r\n  return (\r\n    <form onSubmit={feh}>\r\n      <div>name: <input value={na} onChange={naeh}/></div>\r\n      <div>number: <input value={nu} onChange={nueh}/></div>\r\n      <div><button type=\"submit\">add</button></div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\n// mp=matched people\r\nconst Persons = ({mp, deh}) => {\r\n  if(mp.length === 0) {\r\n    return null\r\n  }\r\n  \r\n  const matchedPeople = mp.map(person => {\r\n    return (\r\n      <div key={person.name}>\r\n        {person.name} {person.number} <button onClick={() => deh(person)}>delete</button>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {matchedPeople}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst ErrorDisplay = ({message}) => {\r\n  if(message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorDisplay","import React from 'react'\r\n\r\nconst NewEntryDisplay = ({message}) => {\r\n  if(message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"newEntry\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewEntryDisplay","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst createEntry = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst updateEntry = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deleteEntry = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`) \r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst entries = { getAll, createEntry, updateEntry, deleteEntry }\r\n\r\nexport default entries","import React, { useState, useEffect } from 'react'\n\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\n\nimport ErrorDisplay from './components/ErrorDisplay'\nimport NewEntryDisplay from './components/NewEntryDisplay'\n\nimport Entries from './services/Entries'\n\n\nconst verifyEntry = (persons, newName, newNumber, setPersons, setError) => {\n  // ensure that the name does not exist\n  const entry = persons.find(p => p.name === newName)\n  if(entry !== undefined){\n    if(entry.number !== newNumber) {\n      if(window.confirm(`${entry.name} already exists in the phonebook, would you like to replace the old phone number with ${newNumber}?`)) {\n        const newP = {...entry, number:newNumber}\n        Entries\n          .updateEntry(newP.id, newP)\n          .then(response => {\n            setPersons(persons.map(p => {\n              if(p.id === newP.id) {\n                p.number = newNumber\n              }\n              return p\n            }))\n          })\n          .catch(error => {\n            setError(`${entry.name} has already been removed from the server`)\n            setTimeout(() => setError(null), 5000)\n          })\n      }\n      return false\n    }\n    window.alert(`${newName} was already added to the phonebook`)\n    return false\n  }\n  // do nothing if name or phone number fields are empty (what kind of phonebook just has a phone number or just a name?)\n  if(newName === '' || newNumber === ''){\n    window.alert('the name or phone number input field was not filled out')\n    return false\n  }\n\n  return true\n}\n\nconst App = () => {\n  // effect hook \n  useEffect(() => {\n    Entries\n      .getAll()\n      .then(response => setPersons(response))\n  }, [])\n\n  // state for storing data passed by user input (these ones are dummy data for testing purposes)\n  const [persons, setPersons] = useState([])\n  // state for displaying error messages\n  const [error, setError] = useState(null)\n  const [newEntryMessage, setNEM] = useState(null)\n  // event handler for the form\n  const submitInfo = (event) => {\n    event.preventDefault()\n\n    // verify for incomplete form and duplicate entries\n    if(!verifyEntry(persons, newName, newNumber, setPersons, setError)){\n      setNewName('')\n      setNewNumber('')\n      return\n    }\n\n    // construct new data entry\n    const person = {\n      name: newName, number: newNumber\n    }\n    Entries\n      .createEntry(person)\n      .then(returnedPerson => {\n        // update state\n        setPersons(persons.concat(returnedPerson))\n        // reset state\n        setNewName('')\n        setNewNumber('')\n\n        setNEM(`${person.name} was added to the phonebook!`)\n        setTimeout(() => setNEM(null), 3000)\n      })\n  }\n  const handleDeleteEntry = (person) => {\n    if(window.confirm(`are you sure you want to delete ${person.name} from the phonebook?`)) {\n      Entries\n        .deleteEntry(person.id)\n        .then(response => setPersons(persons.filter(p => p.id !== person.id)))\n    }\n  }\n\n  // state for storing changes in the name and phone number input field and their event handler\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n\n  // state for storing changes in the search term field and its event handler\n  const [ newST, setST ] = useState('')    \n  const handleSTChange = (event) => setST(event.target.value)\n\n  console.log(persons)\n  const matchedPeople = persons.filter(person => person.name.toUpperCase().includes(newST.toUpperCase())) \n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <ErrorDisplay message={error} />\n      <NewEntryDisplay message={newEntryMessage} />\n      <Filter st={newST} steh={handleSTChange} />\n\n      <h3>add a new phone number</h3>\n      <PersonForm feh={submitInfo} na={newName} naeh={handleNameChange} nu={newNumber} nueh={handleNumberChange} />\n      \n      <h2>Numbers</h2>\n      <Persons mp={matchedPeople} deh={handleDeleteEntry} />\n    </div>\n  ) \n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './index.css'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}